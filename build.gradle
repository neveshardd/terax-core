plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'world.terax'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        name = "spigotmc-repo"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot:1.8.8-R0.1-SNAPSHOT'

    implementation 'io.socket:socket.io-client:1.0.0'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.6.0'
    implementation 'com.zaxxer:HikariCP:3.4.5'
    implementation 'org.mongodb:mongodb-driver-sync:4.0.5'

    implementation files('libraries/waterfall-1.21-598.jar')
    implementation files('libraries/ProtocolLib-4.7.0.jar')
    implementation files('libraries/PlaceholderAPI-2.10.5.jar')
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

jar {
    archiveBaseName.set('Core')
    archiveVersion.set('')
    archiveClassifier.set('')
}

shadowJar {
    archiveBaseName.set('Core')
    archiveClassifier.set('')
    archiveVersion.set('')

    // Incluir apenas HikariCP
    dependencies {
        include(dependency('com.zaxxer:HikariCP:3.4.5'))
    }

    exclude 'org/spigotmc/**'
    exclude 'net/md_5/**'
    exclude 'cglib/**'
    exclude 'com/comphenix/**'
    exclude 'me/clip/**'
}
